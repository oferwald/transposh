<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../core/parser.php';

/**
 * Test class for parser.
 * Generated by PHPUnit on 2010-02-09 at 00:58:18.
 */
class parserTest extends PHPUnit_Framework_TestCase {
    /**
     * @var    parser
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
        $GLOBALS['logger'] = logger::getInstance(true);
        $GLOBALS['logger']->show_caller = true;
        $GLOBALS['logger']->set_debug_level(5);
        $GLOBALS['logger']->eolprint = true;
        $GLOBALS['logger']->printout = true;
        $this->object = new parser;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testIs_white_space().
     */
    public function testIs_white_space() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_a_to_z_character().
     */
    public function testIs_a_to_z_character() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_digit().
     */
    public function testIs_digit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_html_entity().
     */
    public function testIs_html_entity() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_entity_breaker().
     */
    public function testIs_entity_breaker() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_entity_letter().
     */
    public function testIs_entity_letter() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_sentence_breaker().
     */
    public function testIs_sentence_breaker() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_number().
     */
    public function testIs_number() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTag_phrase().
     */
    public function testTag_phrase() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testParsetext().
     */
    public function testParsetext() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTranslate_tagging().
     */
    public function testTranslate_tagging() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreate_edit_span().
     */
    public function testCreate_edit_span() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFix_html().
     */
    public function testFix_html() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_phrases_list().
     */
    public function testGet_phrases_list() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    private function anonArraytoKnown($array) {
        foreach ($array as $key=>$value) {
            $return[$value] = $value;
        }
        return $return;
    }

    private function runtestCut($string, $array) {
        $this->assertEquals($this->anonArraytoKnown($array),$this->object->get_phrases_list($string));
    }
    /**
     * @todo Implement testGet_phrases_list().
     */
    public function testParsing() {
        $this->runtestCut("a, b", array('a' ,'b'));
        $this->runtestCut("hello , world", array('hello' ,'world'));
        $this->runtestCut("42nd, street", array('42nd' ,'street'));
        $this->runtestCut("2b or not 2b", array('2b or not 2b'));
        $this->runtestCut("again, again, and again", array('again','and again'));
     //   $this->testCut("again, again again, again    again, and again", array('again','again again','and again'));
        $this->runtestCut("there are 100 bottles of bear on the wall", array('there are','bottles of bear on the wall'));
        $this->runtestCut("there are 100.5 bottles of bear on the wall", array('there are','bottles of bear on the wall'));
        $this->runtestCut("1) do this", array('do this'));
        $this->runtestCut("a $100", array('a'));
        $this->runtestCut("b 100$", array('b'));
        $this->runtestCut("b100$", array('b100$'));
        $this->runtestCut("b100$,", array('b100$'));
        $this->runtestCut("a 1", array('a'));
        $this->runtestCut("a (1920-30)", array('a'));
        $this->runtestCut("some <b>html</b>is here,", array('some','html','is here'));
    }



}
?>
